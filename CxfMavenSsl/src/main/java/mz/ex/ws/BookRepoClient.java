package mz.ex.ws;

import javax.xml.namespace.QName;
import javax.xml.ws.BindingProvider;
import javax.xml.ws.Service;
import javax.xml.ws.soap.SOAPBinding;

/**
 * This class was generated by Apache CXF 3.1.10 2017-04-25T10:28:30.414-03:00 Generated source version: 3.1.10
 */
public class BookRepoClient {

    public static void main(String[] args) throws Exception {
        /*
		 * Este truststore tiene que tener importado el certificado del keystore generado para encriptar las conexiones
		 * ssl de tomcat.
		 *
		 * Se debe crear un keystore que contenga una clave mediante:
		 * keytool -genkeypair -keyalg RSA -validity 730 -alias myserverkey -keystore serverKeystore.jks -dname "cn=localhost" -keypass password -storepass password
		 * el valor del campo "cn" debe coincidir con la url del server donde el componente sera deployado. El valor localhost implica que tanto el componente como su cliente existiran en la misma PC.
		 * keypass y storepass DEBEN COINCIDIR.
		 * Depositar el *.jks en $TOMCAT_HOME/conf
		 *
		 * 
		 * Se debe agregar la siguiente configuracion al server de tomcat en conf/server.xml:
		 * 
		 * <Connector port="8443" protocol="org.apache.coyote.http11.Http11NioProtocol" maxThreads="150"
		 * SSLEnabled="true" keystoreFile="conf/serverKeystore.jks" keystorePass="password"> <SSLHostConfig>
		 * <Certificate certificateKeystoreFile="conf/serverKeystore.jks" certificateKeystorePassword="password"
		 * type="RSA" /> </SSLHostConfig> </Connector>
		 */

		/* Se deben establecer las propiedades del trust-store adecuadamente. Para usar path relativos, el cliente
		 * debe ser exportado como un jar (si se corre desde un IDE, el path relativo puede fallar). Caso contrario
		  * utilizar path absoluto.*/
        System.setProperty("javax.net.ssl.trustStore", "D:\\apache-tomcat-8.5.33\\conf\\clienttruststore.jks");
        System.setProperty("javax.net.ssl.trustStorePassword", "password");

		/* ESTAS LINEAS SON PARA VISUALIZAR LOS MENSAJES SOAP ENVIADOS */
        System.setProperty("com.sun.xml.ws.transport.http.client.HttpTransportPipe.dump", "true");
        System.setProperty("com.sun.xml.internal.ws.transport.http.client.HttpTransportPipe.dump", "true");
        System.setProperty("com.sun.xml.ws.transport.http.HttpAdapter.dump", "true");
        System.setProperty("com.sun.xml.internal.ws.transport.http.HttpAdapter.dump", "true");

        QName serviceName = new QName("http://ws.ex.mz/", "BookRepoService");
        QName portName = new QName("http://ws.ex.mz/", "BookRepoPort");

        Service service = Service.create(serviceName);
        service.addPort(portName, SOAPBinding.SOAP11HTTP_BINDING, "https://localhost:8443/CxfMavenSsl-0.0.1/BookRepo");
        //		service.addPort(portName, SOAPBinding.SOAP11HTTP_BINDING, "https://localhost:8443/CxfMavenSsl-0.0.1/services/BookRepo");
        mz.ex.ws.BookRepo client = service.getPort(portName, mz.ex.ws.BookRepo.class);

        BindingProvider portBP = (BindingProvider) client;
		/* Se agregan credenciales de usuario. La seguridad de este servicio es BASIC AUTH. Las credenciales
		 * se encuentran declaradas en $TOMCAT/conf/tomcat-users.xml */
        portBP.getRequestContext().put(BindingProvider.USERNAME_PROPERTY, "bob");
        portBP.getRequestContext().put(BindingProvider.PASSWORD_PROPERTY, "trombone");

        BookRequest bookRequest = new BookRequest();
        bookRequest.setIsbn(1234L);
        BookResponse bookResponse = client.getBook(bookRequest);
        System.out.printf("Got book %s:%s %n", bookResponse.getIsbn(), bookResponse.getName());
    }

}