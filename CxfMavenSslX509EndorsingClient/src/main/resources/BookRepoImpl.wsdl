<?xml version="1.0" encoding="UTF-8"?>
<wsdl:definitions name="BookRepoService" targetNamespace="http://ws.ex.mz/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
	xmlns:tns="http://ws.ex.mz/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
	xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" xmlns:wsp="http://www.w3.org/ns/ws-policy"
	xmlns:wsam="http://www.w3.org/2007/05/addressing/metadata" xmlns:sp="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702"
	xmlns:wsaw="http://www.w3.org/2006/05/addressing/wsdl">
	<wsdl:types>
		<xs:schema xmlns:tns="http://ws.ex.mz/" xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="unqualified"
			targetNamespace="http://ws.ex.mz/" version="1.0">

			<xs:element name="getBook" type="tns:getBook" />

			<xs:element name="getBookResponse" type="tns:getBookResponse" />

			<xs:complexType name="getBook">
				<xs:sequence>
					<xs:element minOccurs="0" name="bookRequest" type="tns:bookRequest" />
				</xs:sequence>
			</xs:complexType>

			<xs:complexType name="bookRequest">
				<xs:sequence>
					<xs:element name="isbn" type="xs:long" />
				</xs:sequence>
			</xs:complexType>

			<xs:complexType name="getBookResponse">
				<xs:sequence>
					<xs:element minOccurs="0" name="book" type="tns:bookResponse" />
				</xs:sequence>
			</xs:complexType>

			<xs:complexType name="bookResponse">
				<xs:sequence>
					<xs:element name="isbn" type="xs:long" />
					<xs:element minOccurs="0" name="name" type="xs:string" />
				</xs:sequence>
			</xs:complexType>

		</xs:schema>
	</wsdl:types>
	<wsdl:message name="getBook">
		<wsdl:part name="parameters" element="tns:getBook">
		</wsdl:part>
	</wsdl:message>
	<wsdl:message name="getBookResponse">
		<wsdl:part name="parameters" element="tns:getBookResponse">
		</wsdl:part>
	</wsdl:message>
	<wsdl:portType name="BookRepo">
		<wsdl:operation name="getBook">
			<wsdl:input name="getBook" message="tns:getBook">
			</wsdl:input>
			<wsdl:output name="getBookResponse" message="tns:getBookResponse">
			</wsdl:output>
		</wsdl:operation>
	</wsdl:portType>

	<wsdl:binding name="BookRepoServiceSoapBinding" type="tns:BookRepo">
		<wsp:PolicyReference URI="#BookRepoBindingPolicy" />
		<soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http" />
		<wsdl:operation name="getBook">
			<soap:operation soapAction="" style="document" />
			<wsdl:input>
				<soap:body use="literal" />
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal" />
			</wsdl:output>
		</wsdl:operation>
	</wsdl:binding>

	<wsdl:service name="BookRepoService">
		<wsdl:port name="BookRepoPort" binding="tns:BookRepoServiceSoapBinding">
			<soap:address location="https://localhost:8443/CxfMavenSslX509Endorsing-0.0.1/BookRepo" />
		</wsdl:port>
	</wsdl:service>

	<!-- A policy expression may be identified by a URI and referenced for re-use as a standalone policy or within another policy 
		expression. There are two mechanisms to identify a policy expression: the wsu:Id and Name attributes -->
	<wsp:Policy wsu:Id="BookRepoBindingPolicy">
		<!-- Policy assertions combined using the ExactlyOne operator requires exactly one of the behaviors represented by the 
			assertions. -->
		<wsp:ExactlyOne>
			<!-- Combining policy assertions using the Policy or All operator means that all the behaviors represented by these assertions 
				are required -->
			<wsp:All>
				<!-- The sp:TransportBinding element is a policy assertion. This assertion identifies the use of transport-level security 
					â€“ such as HTTPS - for protecting messages. Policy-aware clients can recognize this policy assertion, engage transport-level 
					security for protecting messages and include security timestamps in SOAP Envelopes. -->
				<!-- The sp:TransportToken assertion requires the use of a specific transport token and further qualifies the behavior 
					of the sp:TransportBinding policy assertion -->
				<!-- Transport binding is suited when the message protection is provided by the transport medium. Most common scenario 
					is using HTTPS as the message exchange transport medium. In transport binding assertion, we can define a transport token 
					through which we can constrain messages to be exchanged only through a defined medium -->
				<!-- TransportBinding means enabling transport layer enryption such as SSL -->
				<!-- with USERNAMETOKEN-over-SSL the entire SOAP message is encrypted -->
				<sp:TransportBinding xmlns:sp="http://schemas.xmlsoap.org/ws/2005/07/securitypolicy">
					<!-- the Policy operator is a synonym for "All" -->
					<wsp:Policy>
						<sp:TransportToken>
							<wsp:Policy>
								<!-- RequireClientCertificate="false" means the client need not provide a certificate when negotiating the HTTPS 
									session, does not mean the tranport binding need not HTTPS -->
								<sp:HttpsToken RequireClientCertificate="false" />
							</wsp:Policy>
						</sp:TransportToken>
						<!-- The sp:AlgorithmSuite is a nested policy assertion of the sp:TransportBinding policy assertion. The sp:AlgorithmSuite 
							assertion requires the use of the algorithm suite identified by its nested policy assertion -->
						<sp:AlgorithmSuite>
							<wsp:Policy>
								<sp:Basic256 />
							</wsp:Policy>
						</sp:AlgorithmSuite>
						<sp:Layout>
							<wsp:Policy>
								<!-- Items are added to the security header following the numbered layout rules described below according to a general 
									principle of 'declare before use'. -->
								<sp:Strict />
							</wsp:Policy>
						</sp:Layout>
						<sp:IncludeTimestamp />
					</wsp:Policy>
				</sp:TransportBinding>


				<!-- If endorsing supporting tokens are defined in the security policy, the message signature generated by signing the 
					elements defined in the security policy, should be SIGNED AGAIN using the endorsing supporting tokens generating a second 
					signature -->
				<!-- An endorsing token is used to sign the SOAP message signature. An endorsing token is usually used to sign the entire 
					<Signature> element and optionally to sign additional message parts. If transport security is used, the endorsing token must 
					be used to sign the Timestamp in the SOAP Security header. -->
				<!-- Endorsing tokens are SupportingTokens in WS-Security, and can be signed and encrypted. There are four types of endorsing 
					tokens. * EndorsingSupportingTokens - The token is not required to be signed or encrypted. * SignedEndorsingSupportingTokens 
					- The token must be signed. * EndorsingEncryptedSupportingTokens - The token must be encrypted. * SignedEndorsingEncryptedSupportingTokens 
					- The token must be signed -->
				<!-- EndorsingSupportingTokens signs timestamp if using transport security, and sign main message signature if using 
					message layer security. In CXF WS-Security, if TLS is used (regardless of Transport policy applied or not), it always requires 
					timestamp be signed, without checking if message layer security is configured and main message signature is endorsed. -->
				<!-- Endorsing tokens sign the message signature, that is they sign the entire Signature element produced from the message 
					signature and may optionally include additional message parts to sign and/or encrypt -->
				<sp:EndorsingSupportingTokens xmlns:sp="http://schemas.xmlsoap.org/ws/2005/07/securitypolicy">
					<wsp:Policy>
						<!-- You can configure an X509Token as an endorsing token. Configuring an X509Token as an endorsing token is similar 
							to configuring an X509Token as an InitiatorToken in an AssymmetricBinding. To configure an X509Token as an endorsing token, 
							you need a policy that has an X509Token contained within one of the endorsing token assertions described previously, and 
							a <SignatureProperties> element in the server.xml file. -->
						<sp:X509Token sp:IncludeToken="http://schemas.xmlsoap.org/ws/2005/07/securitypolicy/IncludeToken/AlwaysToRecipient">
							<wsp:Policy>
								<!-- that tells the runtime to use thumbprint reference instead for the certificate. If your certificate supports 
									SKI (Subject Key Identifier) then you can use the default <sp:WssX509V3Token10>. -->
								<sp:RequireThumbprintReference />
								<!-- This tells runtime to use the certificate -->
								<sp:WssX509V3Token10 />
							</wsp:Policy>
						</sp:X509Token>
						<!-- Defines whether body should be signed and what soap header elements should be signed -->
						<sp:SignedParts>
							<sp:Header Name="To" Namespace="http://www.w3.org/2005/08/addressing" />
						</sp:SignedParts>
					</wsp:Policy>
				</sp:EndorsingSupportingTokens>

				<!-- WS-Security Policy Specification defines three assertions WSS10, WSS11 and Trust10 that are used to provide SOAP 
					message security and trust related options. These options define requirements, that an initiator and a recipient must support. -->
				<sp:Wss11 xmlns:sp="http://schemas.xmlsoap.org/ws/2005/07/securitypolicy">
					<wsp:Policy>
						<!-- Defines that the initiator and the recipient must be able to process thumbprint references -->
						<sp:MustSupportRefThumbprint />
					</wsp:Policy>
				</sp:Wss11>
				<sp:Trust10 xmlns:sp="http://schemas.xmlsoap.org/ws/2005/07/securitypolicy">
					<wsp:Policy>
						<!-- Defines whther wst:IssuedTokens header is supported in the SOAP header -->
						<sp:MustSupportIssuedTokens />
						<!-- Defines whether client entropy is required as a key material -->
						<sp:RequireClientEntropy />
						<!-- Defines whether server entropy is required as a key material -->
						<sp:RequireServerEntropy />
					</wsp:Policy>
				</sp:Trust10>

				<!-- To enable WS-Addressing on the Web service starting from WSDL, add the wsaw:UsingAddressing element to the corresponding 
					wsdl:binding element. Optionally, you can add the wsdl:required Boolean attribute to specify whether WS-Addressing rules 
					are enforced for the inbound message. By default, this attribute is false. -->
				<!-- WS-Addressing provides a transport-neutral mechanism to address Web services and their associated messages. Using 
					WS-Addressing, endpoints are uniquely and unambiguously defined in the SOAP header. WS-Addressing provides two key components 
					that enable transport-neutral addressing, including: * Endpoint reference (EPR)â€”Communicates the information required to 
					address a Web service endpoint. * Message addressing propertiesâ€”Communicates end-to-end message characteristics, including 
					addressing for source and destination endpoints and message identity, that allows uniform addressing of messages independent 
					of the underlying transport. -->
				<wsaw:UsingAddressing />
			</wsp:All>
		</wsp:ExactlyOne>
	</wsp:Policy>
</wsdl:definitions>
